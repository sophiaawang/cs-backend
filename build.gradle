import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

buildscript {
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath 'org.springframework.boot:spring-boot-gradle-plugin:3.2.5'
		classpath 'org.jetbrains.kotlin:kotlin-gradle-plugin:1.8.0'
	}
}

plugins {
	id 'java'
	id 'idea'
	id 'org.springframework.boot' version '3.3.0'
	id 'io.spring.dependency-management' version '1.1.5'
	id 'org.asciidoctor.jvm.convert' version '3.3.2'
	id 'com.github.ben-manes.versions' version '0.47.0'

	id 'org.jetbrains.kotlin.jvm' version '1.8.0'
	id 'org.jetbrains.kotlin.plugin.spring' version '1.8.0'
	id 'org.jetbrains.kotlin.plugin.jpa' version '1.8.0'
	id "io.ebean" version "12.2.1"
}

group = 'org.cuair'
version = '0.0.1-SNAPSHOT'

sourceSets {
	main.kotlin.srcDirs += "src/main"
	main.java.srcDirs += "src/main"
}

apply plugin: "kotlin"

java {
	sourceCompatibility = '17'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

ext {
	set('snippetsDir', file("build/generated-snippets"))
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-data-rest'
	implementation 'org.springframework.boot:spring-boot-starter-jdbc'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	implementation 'org.springframework.boot:spring-boot-starter-validation'

	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'

	// KOTLIN
	implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
	implementation("org.jetbrains.kotlin:kotlin-reflect")
	implementation 'com.fasterxml.jackson.module:jackson-module-kotlin'
	implementation 'io.projectreactor.kotlin:reactor-kotlin-extensions'
	implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-reactor'

	// DB/JDBI dependencies
	implementation("org.jdbi:jdbi3-bom:3.45.0")
	implementation("org.jdbi:jdbi3-spring5:3.45.0")
	implementation("org.jdbi:jdbi3-sqlobject:3.45.0")
	implementation 'org.jdbi:jdbi3-core'
	runtimeOnly 'org.postgresql:postgresql'

	// JAVAX annotations
	implementation group: "javax.annotation", name: "javax.annotation-api", version: "1.3.2"
	implementation group: "org.eclipse.persistence", name: "javax.persistence", version: "2.2.0"
	implementation group: "commons-io", name: "commons-io", version: "2.13.0"

	testImplementation 'org.springframework.boot:spring-boot-test-autoconfigure'
//	:3.3.0

	// protobuf
	implementation 'com.google.protobuf:protobuf-java:3.24.0'

	testImplementation(platform("org.junit:junit-bom:5.10.2"))
	testImplementation("org.junit.jupiter:junit-jupiter-api")
	testImplementation("org.junit.jupiter:junit-jupiter-params")
	testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine")

	implementation 'org.springframework.boot:spring-boot-starter-logging'

	// Ebean
	implementation "io.ebean:ebean:12.2.1"
	implementation "io.ebean:ebean-querybean:12.2.1"
	testImplementation("io.ebean.test:ebean-test-config:11.41.2")
	testImplementation "io.ebean:ebean-test:12.2.1"
}

ebean {
	debugLevel = 0 //0 - 9
}

tasks.named('test') {
	outputs.dir snippetsDir
	useJUnitPlatform()
}

tasks.named('asciidoctor') {
	inputs.dir snippetsDir
	dependsOn test
}

tasks.withType(Jar) {
	manifest {
		attributes 'Main-Class': 'org.cuair.cloud.CloudApplication'
		attributes 'executable': true
	}
	configurations.compileClasspath.each { file ->
		from(zipTree(file))
	}
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

tasks.withType(KotlinCompile) {
	kotlinOptions {
		freeCompilerArgs += '-Xjsr305=strict'
		jvmTarget = '17'
	}
}